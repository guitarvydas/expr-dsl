* intro
  Simple expression parser that takes { ... } and spits out Lisp, skipping everything else
* DSL
  expressions are enclosed in matching braces `{}`
  {x.y.z} --> (slot-value 'z (slot-value 'y x))
* build
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ; rm -rf */*.fasl ; rm -rf */*~")
 (ql:quickload :expr-dsl)
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ; rm -rf */*.fasl ; rm -rf */*~")
 (ql:quickload :expr-dsl/test)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (expr-dsl::test)
#+end_src

#+RESULTS: dsl
#+begin_example
      result0=
garbage more garbage
... ...
% a garbage comment
   % 3 spaces then a comment
123 % an integer then a comment
even 123 more garbage

      result1=!@#x!@#
      result2=!@# (slot-value 'y x) !@#
      result3=!@# (slot-value 'z  (slot-value 'y  (slot-value 'x a) ) ) !@#
#+end_example

