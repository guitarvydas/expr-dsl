* intro
  Simple expression parser that takes { ... } and spits out Lisp, skipping everything else
* DSL
  expressions are enclosed in matching braces `{}`
  {x.y.z} --> (slot-value 'z (slot-value 'y x))
* build
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ; rm -rf */*.fasl ; rm -rf */*~")
 (ql:quickload :expr-dsl)
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ; rm -rf */*.fasl ; rm -rf */*~")
 (ql:quickload :expr-dsl/test)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (expr-dsl::test)
#+end_src

#+RESULTS: dsl
: To load "expr-dsl/test":
:   Load 1 ASDF system:
:     expr-dsl/test
: ; Loading "expr-dsl/test"
: [package loops]...................................
: [package alexandria.1.0.0]........................
: [package scanner].................................
: [package parsing-assembler].......................
: [package expr-dsl].

